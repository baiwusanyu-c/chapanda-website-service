name: Deploy to Aliyun

# 仅在推送到 main 分支时触发
on:
  push:
    branches:
      - master  # 当推送到 main 分支时触发 workflow
  workflow_dispatch: # 允许手动触发，并可以指定分支
    inputs:
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'  # 默认使用 master 分支
        type: string
# 设置执行的工作
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # 安装依赖 pnpm
      - name: Install pnpm
        run: npm install -g pnpm
      # 安装依赖
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      # 构建项目
      - name: Build project
        run: pnpm run build
      # 构建完项目后，在dist/env目录生成环境变量文件，运行时会读取它
      # 用于数据库链接等
      - name: Create env files
        run: |
            ls
            mkdir -p dist/env
            echo 'MYSQL_ROOT_PASSWORD=${{secrets.MYSQL_ROOT_PASSWORD}}' >> dist/env/.env
            echo 'MYSQL_ROOT_USER=${{secrets.MYSQL_ROOT_USER}}' >> dist/env/.env
            echo 'MYSQL_SERVER_HOST=${{secrets.MYSQL_SERVER_HOST}}' >> dist/env/.env
            echo 'REDIS_SERVER_HOST=${{secrets.REDIS_SERVER_HOST}}' >> dist/env/.env
            echo 'REDIS_ROOT_PASSWORD=${{secrets.REDIS_ROOT_PASSWORD}}' >> dist/env/.env
            echo 'MINIO_SERVER_HOST=${{secrets.MINIO_SERVER_HOST}}' >> dist/env/.env
            echo 'MINIO_SERVER_ACCESS=${{secrets.MINIO_SERVER_ACCESS}}' >> dist/env/.env
            echo 'MINIO_SERVER_SECRET=${{secrets.MINIO_SERVER_SECRET}}' >> dist/env/.env
            echo 'MINIO_SERVER_BUKET=${{secrets.MINIO_SERVER_BUKET}}' >> dist/env/.env
            echo 'SSH_PRIVATE_KEY=${{secrets.SSH_PRIVATE_KEY}}' >> dist/env/.env
            echo 'SSH_HOST=${{secrets.SSH_HOST}}' >> dist/env/.env
            echo 'SSH_USER=${{secrets.SSH_USER}}' >> dist/env/.env
            if [ ! -f dist/env/.env ]; then
              echo '::error::.env 文件未生成'
              exit 1
            fi
      # 与目标服务器建立 ssh 链接
      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "${{secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # 同步源码与产物到目标服务器
      - name: Rsync deployment files
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --rsync-path="sudo rsync" \
            ./ $SSH_USER@$SSH_HOST:~/chapanda/service/chapanda-website-service/

      - name: Set execute permissions
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
        run: |
          ssh $SSH_USER@$SSH_HOST "
            cd ~/chapanda/service/chapanda-website-service
            chmod +x scripts/setup.sh
          "
      # 在目标服务器中执行脚本，启动 docker compose
      - name: Run setup script
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          REDIS_ROOT_PASSWORD: ${{ secrets.REDIS_ROOT_PASSWORD }}
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        run: |
          ssh $SSH_USER@$SSH_HOST "
            cd ~/chapanda/service/chapanda-website-service
            export MYSQL_ROOT_PASSWORD='$MYSQL_ROOT_PASSWORD'
            export REDIS_ROOT_PASSWORD='$REDIS_ROOT_PASSWORD'
            export MINIO_ROOT_USER='$MINIO_ROOT_USER'
            export MINIO_ROOT_PASSWORD='$MINIO_ROOT_PASSWORD'
            sudo -E bash scripts/setup.sh
          "
